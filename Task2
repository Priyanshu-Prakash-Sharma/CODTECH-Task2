/*Fitness App*/

package com.example.fitnessapp
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.NavigationBar
import androidx.compose.material3.NavigationBarItem
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.fitnessapp.ui.theme.FitnessAppTheme
import kotlinx.coroutines.delay

data class Workout(val name: String, val sets: Int, val caloriesPerSet: Int)

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            FitnessAppTheme {
                var showSplash by remember { mutableStateOf(true) }

                if (showSplash) {
                    // Show splash screen for 3 seconds
                    SplashScreen {
                        showSplash = false
                    }
                } else {
                    // Show the main screen with navigation
                    MainScreen()
                }
            }
        }
    }
}

@Composable
fun SplashScreen(onSplashEnd: () -> Unit) {
    LaunchedEffect(key1 = true) {
        delay(3000)
        onSplashEnd()
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.LightGray)
            .padding(16.dp),
        contentAlignment = Alignment.Center
    ) {
        Column(horizontalAlignment = Alignment.CenterHorizontally) {
            Image(
                painter = painterResource(id = R.drawable.dumbell),
                contentDescription = "App Logo",
                modifier = Modifier.size(120.dp)
            )
            Spacer(modifier = Modifier.height(16.dp))

            Text(
                text = "Fitness App",
                fontSize = 28.sp,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center
            )
        }
    }
}

@Composable
fun MainScreen() {
    var isWorkoutStarted by remember { mutableStateOf(false) }

    Box {
        Scaffold(
            bottomBar = {
                BottomNavigationBar()
            }
        ) {
            Box(
                modifier = Modifier
                    .padding(it)
                    .background(Color.LightGray)
            ) {
                if (isWorkoutStarted) {
                    FitnessScreen()
                } else {
                    WelcomeScreen(onStartClicked = { isWorkoutStarted = true })
                }
            }
        }
    }
}

@Composable
fun BottomNavigationBar() {
    NavigationBar {
        NavigationBarItem(
            selected = true,
            onClick = { /* TODO: Handle click */ },
            icon = {Box(Modifier.padding(16.dp)) { Icon(painterResource(id = R.drawable.home), contentDescription = "Home") }},
            label = { Text(
                "Home",
                fontWeight = FontWeight.Bold,
            ) }
        )
        NavigationBarItem(
            selected = false,
            onClick = { /* TODO: Handle click */ },
            icon = { Box(Modifier.padding(16.dp)){Icon(painterResource(id = R.drawable.progress), contentDescription = "Progress") }},
            label = { Text(
                "Progress",
                fontWeight = FontWeight.Bold,
            ) }
        )
        NavigationBarItem(
            selected = false,
            onClick = { /* TODO: Handle click */ },
            icon = { Box(Modifier.padding(16.dp)){Icon(painterResource(id = R.drawable.bmi), contentDescription = "BMI")} },
            label = { Text(
                "BMI",
                fontWeight = FontWeight.Bold,
            ) }
        )
        NavigationBarItem(
            selected = false,
            onClick = { /* TODO: Handle click */ },
            icon = { Box(Modifier.padding(16.dp)){Icon(painterResource(id = R.drawable.account), contentDescription = "Account") }},
            label = { Text(
                "Account",
                fontWeight = FontWeight.Bold,
            ) }
        )
    }
}

@Composable
fun WelcomeScreen(onStartClicked: () -> Unit) {
    Column {
        Spacer(modifier = Modifier.height(24.dp))
        Text(
            text = "FITNESS APP",
            fontSize = 48.sp,
            color = Color.Black,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Center
        )
    }
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Welcome, Priyanshu",
            color = Color.Black,
            fontSize = 28.sp,
            fontWeight = FontWeight.SemiBold,
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Center
        )

        Spacer(modifier = Modifier.height(32.dp))

        Text(
            text = "Today's Workout Plan",
            fontSize = 24.sp,
            color = Color.Black,
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Center
        )

        Spacer(modifier = Modifier.height(32.dp))

        // Workout summary UI like in your image
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 30.dp),
            elevation = CardDefaults.cardElevation(8.dp)
        ) {
            Column(
                modifier = Modifier.padding(20.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(text = "Exercises - 12", fontSize = 19.sp, fontWeight = FontWeight.Bold)
                Text(text = "Calories Burn - 200kcal", fontSize = 19.sp, fontWeight = FontWeight.Bold)
                Text(text = "Time Required - 30mins", fontSize = 19.sp, fontWeight = FontWeight.Bold)
                Text(text = "Level - Easy", fontSize = 19.sp, fontWeight = FontWeight.Bold)

                Spacer(modifier = Modifier.height(16.dp))

                // Start Button
                Button(onClick = onStartClicked) {
                    Text(text = "START", fontSize = 20.sp)
                }
            }
        }
    }
}

@Composable
fun FitnessScreen() {
    val workouts = listOf(
        Workout("Push Ups", 3, 30),
        Workout("Squats", 3, 25),
        Workout("Jumping Jacks", 3, 20),
        Workout("Lunges", 3, 35),
        Workout("Plank", 2, 40)
    )
    val workoutImages = mapOf(
        "Push Ups" to R.drawable.push, // Replace with your actual drawable resources
        "Squats" to R.drawable.squat,
        "Jumping Jacks" to R.drawable.jumping,
        "Lunges" to R.drawable.lunges,
        "Plank" to R.drawable.plank,
    )

    var totalCalories by remember { mutableIntStateOf(0) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(20.dp)
    ) {
        Text(
            text = "Today's Workout Plan",
            fontSize = 24.sp,
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Center,
            color = Color.Black
        )

        LazyColumn(modifier = Modifier.weight(1f)) {
            items(workouts.size) { index ->
                val workout = workouts[index]
                val imageResource = workoutImages[workout.name] ?: R.drawable.dumbell
                WorkoutItem(
                    workout = workout,
                    onCaloriesBurned = { totalCalories += it },
                    imageResource = imageResource
                )
            }
        }

        Text(
            text = "Total Calories Burned: $totalCalories kcal",
            fontSize = 20.sp,
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Center,
            color = Color.Black
        )

    }
}

@Composable
fun WorkoutItem(workout: Workout, onCaloriesBurned: (Int) -> Unit,imageResource: Int) {
    var completedSets by remember { mutableIntStateOf(0) }

    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(8.dp)
    ) {
        Column {
            Row {
                Column(modifier = Modifier
                    .padding(16.dp)) {
                    Text(
                        text = workout.name,
                        fontSize = 20.sp
                    )
                    Text(
                        text = "Sets: ${workout.sets}",
                        fontSize = 16.sp
                    )
                    Text(
                        text = "Calories per set: ${workout.caloriesPerSet} kcal",
                        fontSize = 16.sp
                    )
                }
                Column(modifier = Modifier
                    .padding(16.dp)) {
                    Box {
                        Image(
                            painter = painterResource(id = imageResource), // Use imageResource here
                            contentDescription = workout.name,
                            modifier = Modifier.size(60.dp)
                        )
                    }
                }
            }
            Row(
                horizontalArrangement = Arrangement.SpaceBetween,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                Button(
                    onClick = {
                        if (completedSets < workout.sets) {
                            completedSets++
                            onCaloriesBurned(workout.caloriesPerSet)
                        }
                    }
                ) {
                    Text(text = "Complete Set")
                }

                Box(Modifier.padding(8.dp)) {
                    Text(
                        text = "Completed: $completedSets/${workout.sets} sets",
                        fontSize = 12.sp
                    )
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun WelcomeScreenPreview() {
    FitnessAppTheme {
        WelcomeScreen(onStartClicked = {})
    }
}

@Preview(showBackground = true)
@Composable
fun FitnessScreenPreview() {
    FitnessAppTheme {
        FitnessScreen()
    }
}
